#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>
using namespace std; 

void Increment();
void IncrementKey();
void KeyCipher(int);

char cipher[26][26];
char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
string message;
string key;
string emessage;

int main(){
    int row;
    int col;
    int letter;
    
    for(row = 0 ; row < 26; row++){
        letter = 0;
        for(col = 0 ; col < 26; col++ ){
            cipher[row][col] = alphabet[letter];
            letter++;
        }
        Increment();
    }

    cout << "Enter the message you would like to Encrypt: ";
    getline(cin,message);
    message.erase(remove(message.begin(),message.end(),' '),message.end());
    cout << "Enter what key you will be using: ";
    getline(cin,key);  
    key.erase(remove(key.begin(),key.end(),' '),key.end());

    int length = message.length();
    
    int messageIndex[length];
    
    transform(message.begin(), message.end(), message.begin(), ::toupper);
    transform(key.begin(), key.end(), key.begin(), ::toupper);

    for (int i = 0; i < length; ++i){
        char lett = message.at(i);
        
        int index = -1;
        for (int j = 0; j < 26; ++j) {
            if (alphabet[j] == lett) {
                messageIndex[i] = j;
                break;
            }
        }
    }
    
    for (int i = 0; i < length; ++i){
        KeyCipher(messageIndex[i]);
    }
    
    cout << "Encrypted Message: " << emessage << endl;

   return 0;
}

void KeyCipher(int index1){
    int index2;

    for(int row = 0; row < 26; row++){
        if(key[0] == cipher[row][0]){
            index2 = row;
            IncrementKey();
            break;
        }
    }

    emessage += cipher[index1][index2];
}


void Increment(){
    char temp;
    temp = alphabet[0];

    for(int i = 0; i < 25; i++){
        alphabet[i] = alphabet[i + 1];
    }

    alphabet[25] = temp;
}

void IncrementKey(){
    char temp;
    temp = key[0];

    for(int i = 0; i < key.length() - 1; i++){
        key[i] = key[i + 1];
    }

    key[key.length() - 1] = temp;
}
